Provide replacement for OSAtomicAdd64 on ppc where it was never implemented.
Also work around OSAtomic functions on OS X < 10.5 not expecting volatiles as
arguments.

diff --git a/src/ld/InputFiles.cpp b/src/ld/InputFiles.cpp
index a4a4d5d..cdfd621 100644
--- a/src/ld/InputFiles.cpp
+++ b/src/ld/InputFiles.cpp
@@ -64,6 +64,10 @@
 #include "MachOFileAbstraction.hpp"
 #include "Snapshot.h"
 
+#if (!(defined(__i386__) || defined(__x86_64__) || defined(__ppc64___)))
+# define NEEDS_OSATOMIC64_REPLACEMENTS 1
+#endif
+
 const bool _s_logPThreads = false;
 
 namespace ld {
@@ -205,6 +209,23 @@ const char* InputFiles::fileArch(const uint8_t* p, unsigned len)
 	return unsupported;
 }
 
+#if NEEDS_OSATOMIC64_REPLACEMENTS
+# if HAVE_PTHREADS
+pthread_mutex_t osatomicadd64_lock;
+# endif
+
+// provide replacement for OSAtomicAdd64 for platforms that don't have it
+int64_t OSAtomicAdd64(int64_t amount, LD_ATOMIC_VOLATILE int64_t *target) {
+# if HAVE_PTHREADS
+	pthread_mutex_lock(&osatomicadd64_lock);
+# endif
+	(*target) += amount;
+# if HAVE_PTHREADS
+	pthread_mutex_unlock(&osatomicadd64_lock);
+# endif
+	return *target;
+}
+#endif
 
 ld::File* InputFiles::makeFile(const Options::FileInfo& info, bool indirectDylib)
 {
@@ -792,6 +813,9 @@ InputFiles::InputFiles(Options& opts, const char** archName)
 	pthread_mutex_init(&_parseLock, NULL);
 	pthread_cond_init(&_parseWorkReady, NULL);
 	pthread_cond_init(&_newFileAvailable, NULL);
+# if NEEDS_OSATOMIC64_REPLACEMENTS
+	pthread_mutex_init(&osatomicadd64_lock, NULL);
+# endif
 #endif
 	const std::vector<Options::FileInfo>& files = _options.getInputFiles();
 	if ( files.size() == 0 )
diff --git a/src/ld/InputFiles.h b/src/ld/InputFiles.h
index b1e85cb..42e2e09 100644
--- a/src/ld/InputFiles.h
+++ b/src/ld/InputFiles.h
@@ -78,11 +78,16 @@ public:
 	void						createIndirectDylibs();
 
 	// for -print_statistics
-	volatile int64_t			_totalObjectSize;
-	volatile int64_t			_totalArchiveSize;
-	volatile int32_t			_totalObjectLoaded;
-	volatile int32_t			_totalArchivesLoaded;
-	volatile int32_t			_totalDylibsLoaded;
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1050
+#define LD_ATOMIC_VOLATILE volatile
+#else
+#define LD_ATOMIC_VOLATILE
+#endif
+	LD_ATOMIC_VOLATILE int64_t			_totalObjectSize;
+	LD_ATOMIC_VOLATILE int64_t			_totalArchiveSize;
+	LD_ATOMIC_VOLATILE int32_t			_totalObjectLoaded;
+	LD_ATOMIC_VOLATILE int32_t			_totalArchivesLoaded;
+	LD_ATOMIC_VOLATILE int32_t			_totalDylibsLoaded;
 	
 	
 private:
